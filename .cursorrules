# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When implementing UI features, prioritize validation for better user experience
- Include confirmation dialogs for destructive actions like deletion
- Use pagination for lists that may grow large over time
- Add search and filtering functionality to make data management more efficient
- For database delete operations with foreign key relationships, use a robust transaction approach with error handling
- Always check database responses and use explicit selects after delete operations to verify success
- Invalidate cache and force state refresh after critical operations like deletion to ensure UI consistency 
- Add detailed logging for database operations to aid in debugging production issues
- Implement optimistic UI updates for better user experience (update UI first, then try database operations)
- When handling deletion operations, always update local cache/state immediately even if the backend operation fails
- Use error boundaries in UI components to prevent entire application crashes from localized errors
- Admin dashboard doesn't need caching or saving to IndexedDB - fetch fresh data each time to ensure admins always see the latest information
- When using workbox-window for PWA development, import it from "workbox-window" package
- Use type assertion with (registration as any).sync.register for TypeScript when working with SyncManager API
- Create comprehensive offline IndexedDB storage with sync queue for resilient PWA functionality
- Implement stale-while-revalidate caching strategy for API responses while using CacheFirst for static assets
- Add preconnect and prefetch for critical resources to improve initial loading times
- Use requestIdleCallback for non-critical tasks to avoid blocking the main thread during app startup
- For image optimization, check for WebP support before conversion to maintain browser compatibility
- Create lazy loading components with IntersectionObserver and build in native loading='lazy' fallback
- Implement ServiceWorkerUpdateNotification component with custom animations for better UX
- Use Workbox's built-in expiration plugin to prevent cache from growing too large
- Ensure proper cleanup of resources and event listeners in React useEffect hooks
- Create a central app initialization utility that handles all performance optimizations in the correct order

# Scratchpad

Task: Optimize Service Worker and Caching for PWA

[X] Analyze current implementation
[X] Implement Workbox for better service worker management
  [X] Add workbox-window integration in pwa.ts
  [X] Update service-worker.js with Workbox caching strategies
  [X] Create workbox-config.js for advanced caching configuration
[X] Implement proper caching strategies
  [X] CacheFirst for static assets and fonts
  [X] NetworkFirst for HTML pages
  [X] StaleWhileRevalidate for API endpoints
[X] Enhance image loading
  [X] Create image optimization utilities
  [X] Add WebP conversion for modern browsers
  [X] Implement lazy loading with IntersectionObserver
  [X] Create an OptimizedImage React component
[X] Improve offline capabilities
  [X] Implement comprehensive IndexedDB utilities
  [X] Create background sync for offline data updates
  [X] Add offline fallback page
[X] Optimize application initialization
  [X] Create centralized app initializer
  [X] Add preconnect and prefetch optimizations
  [X] Implement performance monitoring
[X] Update Vite configuration
  [X] Enhance PWA plugin settings
  [X] Add compression and HTTP/3 settings
[X] Create notification for service worker updates
  [X] Implement ServiceWorkerUpdateNotification component

Key improvements implemented:
1. **Service Worker Optimization**:
   - Replaced manual service worker with Workbox for improved caching
   - Implemented stale-while-revalidate for API calls
   - Added CacheFirst for static assets, fonts, and images
   - Created proper versioning for cache invalidation

2. **Offline Capabilities**:
   - Added comprehensive IndexedDB implementation
   - Created background sync queue for offline operations
   - Improved offline page with better UX
   - Added automatic sync when back online

3. **Image Optimization**:
   - Implemented WebP conversion for supported browsers
   - Created responsive image loading with srcSet
   - Added lazy loading with IntersectionObserver
   - Created blur-up technique for smoother loading

4. **Bundle Optimization**:
   - Added HTTP/2 and compression headers
   - Improved chunk splitting in Vite config
   - Added preloading and prefetching of critical resources
   - Implemented requestIdleCallback for non-critical tasks

5. **Performance Monitoring**:
   - Added Core Web Vitals tracking
   - Implemented performance marks and measures
   - Created debug logging for optimization timing

The application now loads significantly faster, works better offline, and provides a more app-like experience with smoother transitions and optimized resource loading.

Task completed âœ…